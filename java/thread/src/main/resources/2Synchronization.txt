Threads communicate primarily by sharing access to fields and the objects reference fields refer to.
Two kinds of errors possible: thread interference and memory consistency errors.

synchronization can introduce thread contention, which occurs when two or more threads try to access the same resource 
simultaneously and cause the Java runtime to execute one or more threads more slowly, or even suspend their execution. 
Starvation and livelock are forms of thread contention.

This section covers the following topics:

    Thread Interference describes how errors are introduced when multiple threads access shared data.
    Memory Consistency Errors describes errors that result from inconsistent views of shared memory.
    Synchronized Methods describes a simple idiom that can effectively prevent thread interference and memory consistency errors.
    Implicit Locks and Synchronization describes a more general synchronization idiom, and describes how synchronization is based on implicit locks.
    Atomic Access talks about the general idea of operations that can't be interfered with by other threads.

Thread Interference : 
Interference happens when two operations, running in different threads, but acting on the same data, interleave. This means that 
the two operations consist of multiple steps, and the sequences of steps overlap.
Check Counter.java comments

Memory Consistency Errors : 
Memory consistency errors occur when different threads have inconsistent views of what should be the same data.The key to avoiding 
memory consistency errors is understanding the happens-before relationship.

The counter field is shared between two threads, A and B. Suppose thread A increments counter:

	counter++;

Then, shortly afterwards, thread B prints out counter:

	System.out.println(counter);

If the two statements had been executed in the same thread, it would be safe to assume that the value printed out would be "1". 
But if the two statements are executed in separate threads, the value printed out might well be "0", because there's no guarantee 
that thread A's change to counter will be visible to thread B — unless the programmer has established a happens-before relationship 
between these two statements

Two actions that create happens-before relationships.
1. When a statement invokes Thread.start, every statement that has a happens-before relationship with that statement also has a 
happens-before relationship with every statement executed by the new thread.  
2. When a thread terminates and causes a Thread.join in another thread to return, then all the statements executed by the terminated 
thread have a happens-before relationship with all the statements following the successful join.

Synchronized Methods : 
The Java programming language provides two basic synchronization idioms: synchronized methods and synchronized statements. 

making these methods synchronized has two effects:

    First, it is not possible for two invocations of synchronized methods on the same object to interleave
    Second, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent 
    	invocation of a synchronized method for the same object.

Constructors cannot be synchronized.using the synchronized keyword with a constructor is a syntax error. Synchronizing constructors 
doesn't make sense, because only the thread that creates an object should have access to it while it is being constructed.

if an object is visible to more than one thread, all reads or writes to that object's variables are done through synchronized methods. 
(An important exception: final fields, which cannot be modified after the object is constructed, can be safely read through 
non-synchronized methods, once the object is constructed) This strategy is effective, but can present problems with liveness.

Intrinsic Locks and Synchronization : 
Synchronization is built around an internal entity known as the intrinsic lock or monitor lock. Intrinsic locks play a role in both 
aspects of synchronization: enforcing exclusive access to an object's state and establishing happens-before relationships that are 
essential to visibility.

a thread that needs exclusive and consistent access to an object's fields has to acquire the object's intrinsic lock before accessing 
them, and then release the intrinsic lock when it's done with them. A thread is said to own the intrinsic lock between the time it 
has acquired the lock and released the lock.The other thread will block when it attempts to acquire the lock.

static method is associated with a class, not an object. In this case, the thread acquires the intrinsic lock for the Class object 
associated with the class

Reentrant Synchronization
Recall that a thread cannot acquire a lock owned by another thread. But a thread can acquire a lock that it already owns. Allowing a 
thread to acquire the same lock more than once enables reentrant synchronization.Without reentrant synchronization, synchronized code 
would have to take many additional precautions to avoid having a thread cause itself to block.

Atomic Access : 
An atomic action cannot stop in the middle: it either happens completely, or it doesn't happen at all.
Atomic actions cannot be interleaved, so they can be used without fear of thread interference. However, this does not eliminate all 
need to synchronize atomic actions, because memory consistency errors are still possible. Using volatile variables reduces the risk of 
memory consistency errors, because any write to a volatile variable establishes a happens-before relationship with subsequent reads of 
that same variable. This means that changes to a volatile variable are always visible to other threads. What's more, it also means 
that when a thread reads a volatile variable, it sees not just the latest change to the volatile, but also the side effects of the 
code that led up the change.

