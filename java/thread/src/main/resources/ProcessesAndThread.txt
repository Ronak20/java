Processes and Threads

Processing time for a single core is shared among processes and threads through an OS feature called time slicing.

Processes : 
A process has a self-contained execution environment.A process generally has a complete, private set of basic run-time resources; 
in particular, each process has its own memory space.

 However, what the user sees as a single application may in fact be a set of cooperating processes. To facilitate communication 
 between processes, most operating systems support Inter Process Communication (IPC) resources, such as pipes and sockets.
 
A Java application can create additional processes using a ProcessBuilder object.

Threads : 
Threads share the process's resources, including memory and open files.

Thread Objects : 
    1. To directly control thread creation and management, simply instantiate Thread each time the application needs to initiate an 
    asynchronous task.
    2. To abstract thread management from the rest of your application, pass the application's tasks to an executor.
    
Defining and Starting a Thread
	Provide a Runnable object.
	Subclass Thread.
	
Pausing Execution with Sleep : 
Thread.sleep causes the current thread to suspend execution for a specified period.This is an efficient means of making processor 
time available to the other threads of an application. sleep throws InterruptedException exception when another thread interrupts 
the current thread while sleep is active.
	
Interrupts : 
An interrupt is an indication to a thread that it should stop what it is doing and do something else. If the thread is frequently 
invoking methods that throw InterruptedException, it simply returns from the run method after it catches that exception.

If a thread goes a long time without invoking a method that throws InterruptedException? Then it must periodically invoke 
Thread.interrupted, which returns true if an interrupt has been received.

The Interrupt Status Flag
The interrupt mechanism is implemented using an internal flag known as the interrupt status. Invoking Thread.interrupt sets this 
flag. When a thread checks for an interrupt by invoking the static method Thread.interrupted, interrupt status is cleared. The 
non-static isInterrupted method, which is used by one thread to query the interrupt status of another, does not change the interrupt 
status flag.

Joins : 
The join method allows one thread to wait for the completion of another. If t is a Thread object whose thread is currently executing,
t.join();
causes the current thread to pause execution until t's thread terminates.

Like sleep, join responds to an interrupt by exiting with an InterruptedException.